swagger: '2.0'
info:
  description: >-
    An active cyber defense development framework enabling orchestration
    capabilities to be written once and deployed across WALKOFF-enabled
    orchestration tools. https://nsacyber.github.io/WALKOFF/
  version: 0.9.0
  title: WALKOFF
  contact:
    email: walkoff@nsa.gov
  license:
    name: Creative-Commons
    url: 'http://creativecommons.org/licenses/by/4.0/'

tags:
  - name: Authorization
    description: Authorization Operations
  - name: Apps
    description: App Management Operations
  - name: Cases
    description: WALKOFF logging and case management operations
  - name: Subscriptions
    description: WALKOFF case subscription operations
  - name: Configuration
    description: System Configuration Operations
  - name: Devices
    description: Device Operations
  - name: Users
    description: User operations
  - name: Roles
    description: Role Operations
  - name: Metrics
    description: Metric Operations
  - name: Playbooks
    description: Playbook Operations
  - name: Workflows
    description: Workflow Operations
  - name: WorkflowQueue
    description: Workflow Control Operations
  - name: Events
    description: Event Operations
  - name: Scheduler
    description: Scheduler Operations
  - name: Triggers
    description: Trigger Operations
  - name: System
    description: System Operations
  - name: Client
    description: Serves up client pages
  - name: Message
    description: User messages
  - name: System
    description: System Resources

basePath: /api

schemes:
  - http
  - https

paths:
  /apps:
    get:
      tags:
        - System
      summary: Gets all apps
      description: ''
      operationId: walkoff.server.endpoints.appapi.read_all_apps
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: List of app names
            items:
              type: string
              example: [PhillipsHue, OpenDaylight, PaloAlto]

  /apps/apis:
    get:
      tags:
        - Apps
      summary: Get all app apis
      description: ''
      operationId: walkoff.server.endpoints.appapi.read_all_app_apis
      produces:
        - application/json
      parameters:
        - name: field_name
          in: query
          description: The name of the field of the api to get for all apps
          required: false
          type: string
          enum: [info, action_apis, condition_apis, transform_apis, device_apis, tags, external_docs]
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: object

  /apps/apis/{app_name}:
    get:
      tags:
        - Apps
      summary: Get and app's api
      description: ''
      operationId: walkoff.server.endpoints.appapi.read_app_api
      produces:
        - application/json
      parameters:
        - name: app_name
          in: path
          description: The name of the app to get
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/AppApi'
        404:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'

  /apps/apis/{app_name}/{field_name}:
    get:
      tags:
        - Apps
      summary: Get a field of an app's api
      description: ''
      operationId: walkoff.server.endpoints.appapi.read_app_api_field
      produces:
        - application/json
      parameters:
        - name: app_name
          in: path
          description: The name of the app to get
          required: true
          type: string
        - name: field_name
          in: path
          description: The name of the field in the app api to get
          required: true
          type: string
          enum: [info, action_apis, condition_apis, transform_apis, device_apis, tags, externalDocs]
      responses:
        200:
          description: Success
          schema:
            type: object
        404:
          description: App does not exist
          schema:
            $ref: '#/definitions/Error'


  /auth:
    post:
      tags:
        - Authorization
      summary: Login and get access and refresh tokens
      description: ''
      operationId: walkoff.server.endpoints.auth.login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The username and password
          required: true
          schema:
            $ref: '#/definitions/Authentication'
      responses:
        201:
          description: Success
          schema:
            $ref: '#/definitions/Token'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'

  /auth/refresh:
    post:
      tags:
        - Authorization
      summary: Get a fresh access token
      description: ''
      operationId: walkoff.server.endpoints.auth.refresh
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Token'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'

  /auth/logout:
    post:
      tags:
        - Authorization
      summary: Logout of walkoff
      operationId: walkoff.server.endpoints.auth.logout
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The refresh token to be revoked
          required: true
          schema:
            type: object
            required: [refresh_token]
            properties:
              refresh_token:
                type: string
                description: the refresh token to be revoked
      responses:
        204:
          description: Success
        400:
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/Error'

  /configuration:
    get:
      tags:
        - Configuration
      summary: Reads the configuration
      operationId: walkoff.server.endpoints.configuration.read_config_values
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Configuration'
        401:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Configuration
      summary: Updates the configuration
      operationId: walkoff.server.endpoints.configuration.update_configuration
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: configuration
          in: body
          description: The configuration object
          required: true
          schema:
            $ref: '#/definitions/Configuration'
      responses:
        200:
          description: Success
        401:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
        515:
          description: Could not write configuration to file
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Configuration
      summary: Updates the configuration
      operationId: walkoff.server.endpoints.configuration.patch_configuration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: configuration
          in: body
          description: The configuration object
          required: true
          schema:
            $ref: '#/definitions/Configuration'
      responses:
        200:
          description: Success
        401:
          description: Unauthorized access
          schema:
            $ref: '#/definitions/Error'
        515:
          description: Could not write configuration to file
          schema:
            $ref: '#/definitions/Error'

  /devices/{device_id}:
    parameters:
      - in: path
        name: device_id
        description: ID of the device
        type: integer
        required: true
      - in: query
        name: mode
        description: Specify mode as export to download the device file
        type: string
        required: false
    get:
      tags:
        - Devices
      summary: Read or download a device
      description: ''
      operationId: walkoff.server.endpoints.devices.read_device
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Device'
        404:
          description: Device does not exist.
    delete:
      tags:
        - Devices
      summary: Remove a device
      description: ''
      operationId: walkoff.server.endpoints.devices.delete_device
      produces:
        - application/json
      responses:
        204:
          description: Success
        404:
          description: Device does not exist
          schema:
            $ref: '#/definitions/Error'
  /devices:
    get:
      tags:
        - Devices
      summary: Get all devices
      description: ''
      operationId: walkoff.server.endpoints.devices.read_all_devices
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: A list of devices
            items:
              $ref: '#/definitions/Device'
    post:
      tags:
        - Devices
      summary: Add a device
      description: ''
      operationId: walkoff.server.endpoints.devices.create_device
      consumes:
        - application/json
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new device object to be created
          required: false
          schema:
            $ref: '#/definitions/AddDevice'
        - in: formData
          name: formData
          description: The device file to be imported
          required: false
          type: file
      responses:
        201:
          description: Object created
          schema:
            $ref: '#/definitions/Device'
        400:
          description: Device already exists
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Devices
      summary: Update a device
      description: ''
      operationId: walkoff.server.endpoints.devices.update_device
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new device object to be created
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Device'
        404:
          description: Device does not exist
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Devices
      summary: Update a device
      description: ''
      operationId: walkoff.server.endpoints.devices.patch_device
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new device object to be created
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Device'
        404:
          description: Device does not exist
          schema:
            $ref: '#/definitions/Error'

  /messages:
    get:
      tags:
        - Messages
      summary: Gets a user's messages
      description: Gets all the messages for a given user. User is given by JWT
      operationId: walkoff.server.endpoints.messages.get_all_messages
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: A list of messages
            items:
              $ref: '#/definitions/MessageSummary'
    put:
      tags:
        - Messages
      summary: Acts on a user's messages
      operationId: walkoff.server.endpoints.messages.act_on_messages
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Message IDs to act on
          required: true
          schema:
            type: object
            required: [ids, action]
            properties:
              ids:
                type: array
                items:
                  type: integer
                  minimum: 1
              action:
                description: The action to take on multiple messages
                type: string
                enum: [read, unread, delete]
      responses:
        200:
          description: Success
          schema:
            type: string
            enum: [Success]
        404:
          description: Action is invalid or User doesn't exist
          schema:
            $ref: "#/definitions/Error"

  /messages/{message_id}:
    parameters:
      - name: message_id
        in: path
        description: The action to take on multiple messages
        required: true
        type: integer
        minimum: 1
    get:
      tags:
        - Messages
      summary: Get a message
      operationId: walkoff.server.endpoints.messages.get_message
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Message'
        403:
          description: User does not have access to message
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Message doesn't exist
          schema:
            $ref: "#/definitions/Error"

  /notifications:
    get:
      tags:
        - Messages
      summary: Get all notifications
      operationId: walkoff.server.endpoints.messages.get_recent_notifications
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/MessageSummary'


  /interfaces:
    get:
      tags:
        - System
      summary: Read all interfaces
      description: ''
      operationId: walkoff.server.endpoints.metadata.read_all_interfaces
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: All the interfaces defined
            type: array
            items:
              type: string


  /client/{filename}:
    get:
      tags:
        - Client
      summary: Get a client file
      description: ''
      operationId: walkoff.server.endpoints.metadata.read_client_file
      produces:
        - application/json
      parameters:
        - name: filename
          in: path
          description: The name of the file to fetch
          required: true
          type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid filename


  /metrics/apps:
    get:
      tags:
        - Metrics
      summary: Read app usage metrics
      description: ''
      operationId: walkoff.server.endpoints.metrics.read_app_metrics
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/AppMetrics'
  /metrics/workflows:
    get:
      tags:
        - Metrics
      summary: Read Workflow Metrics
      description: ''
      operationId: walkoff.server.endpoints.metrics.read_workflow_metrics
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/WorkflowMetrics'

  /playbooks:
    get:
      tags:
        - Playbooks
      summary: Read all playbooks
      description: ''
      operationId: walkoff.server.endpoints.playbooks.get_playbooks
      produces:
        - application/json
      parameters:
        - in: query
          name: full
          type: boolean
          required: false
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Playbook'
    post:
      tags:
        - Playbooks
      summary: Create a playbook
      description: ''
      operationId: walkoff.server.endpoints.playbooks.create_playbook
      consumes:
        - application/json
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: query
          name: source
          description: The ID of the playbook to clone
          type: string
          required: false
          format: uuid
        - in: body
          name: body
          description: The playbook object to be created
          required: false
          schema:
            $ref: '#/definitions/CreatePlaybook'
        - in: formData
          name: formData
          description: The playbook file to be imported
          required: false
          type: file
      responses:
        201:
          description: Object created
          schema:
            $ref: '#/definitions/Playbook'
        400:
          description: Object exists
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Playbooks
      summary: Update a playbook
      description: ''
      operationId: walkoff.server.endpoints.playbooks.update_playbook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Fields of the playbook object to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdatePlaybook'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Playbook'
        404:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Playbook already exists.
          schema:
            $ref: '#/definitions/Error'

  /playbooks/{playbook_id}:
    parameters:
      - name: playbook_id
        in: path
        description: The ID that needs to be fetched.
        required: true
        type: string
        format: uuid
      - in: query
        name: mode
        description: Specify mode as export to download the playbook file
        type: string
        required: false
    get:
      tags:
        - Playbooks
      summary: Read or download a playbook
      description: ''
      operationId: walkoff.server.endpoints.playbooks.read_playbook
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Playbook'
        404:
          description: Object does not exist.
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'
        515:
          description: I/O error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Playbooks
      summary: Delete a playbook
      description: ''
      operationId: walkoff.server.endpoints.playbooks.delete_playbook
      produces:
        - application/json
      responses:
        204:
          description: Success
        404:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        515:
          description: I/O error.
          schema:
            $ref: '#/definitions/Error'


  /playbooks/{playbook_id}/workflows:
    parameters:
      - name: playbook_id
        in: path
        description: 'The ID that needs to be fetched. '
        required: true
        type: string
        format: uuid
    get:
      tags:
        - Playbooks
      summary: Read all workflows in playbook
      description: ''
      operationId: walkoff.server.endpoints.playbooks.get_workflows_for_playbook
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: The JSON representation of all the workflows for the playbook
            items:
              $ref: '#/definitions/Workflow'
        404:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'

  /workflows:
    get:
      tags:
        - Playbooks
      summary: Read all workflows in playbook
      description: ''
      operationId: walkoff.server.endpoints.playbooks.get_workflows
      produces:
        - application/json
      parameters:
        - in: query
          name: playbook
          description: The ID of the playbook whose workflows to get
          type: string
          required: false
          format: uuid
      responses:
        200:
          description: Success
          schema:
            type: array
            description: The JSON representation of all the workflows for the playbook
            items:
              $ref: '#/definitions/Workflow'
        404:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Workflows
      summary: Create a workflow
      description: ''
      operationId: walkoff.server.endpoints.playbooks.create_workflow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: source
          description: The ID of the workflow to clone
          type: string
          format: uuid
          required: false
        - in: body
          name: body
          description: The workflow object to be created
          required: true
          schema:
            $ref: '#/definitions/CreateWorkflow'
      responses:
        201:
          description: Workflow created.
          schema:
            $ref: '#/definitions/Workflow'
        404:
          description: Playbook does not exist.
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Workflow already exists.
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Workflows
      summary: Update a workflow
      description: ''
      operationId: walkoff.server.endpoints.playbooks.update_workflow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The fields of the workflow object to be updated
          required: true
          schema:
            $ref: '#/definitions/Workflow'
      responses:
        200:
          description: Success
          schema:
            type: object
            required: [workflow]
            properties:
              workflow:
                $ref: '#/definitions/Workflow'
        404:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Workflow already exists.
          schema:
            $ref: '#/definitions/Error'

  /workflows/{workflow_id}:
    parameters:
      - name: workflow_id
        in: path
        description: 'The ID that needs to be fetched. '
        required: true
        type: string
        format: uuid
    get:
      tags:
        - Workflows
      summary: Read a workflow
      description: ''
      operationId: walkoff.server.endpoints.playbooks.read_workflow
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Workflow'
        404:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'

    delete:
      tags:
        - Workflows
      summary: Delete a workflow
      description: ''
      operationId: walkoff.server.endpoints.playbooks.delete_workflow
      produces:
        - application/json
      responses:
        204:
          description: Success
        404:
          description: Playbook or workflow does not exist.
          schema:
            $ref: '#/definitions/Error'

  /uuid:
    get:
      tags:
        - Workflows
      summary: Get a new UUID
      description: ''
      operationId: walkoff.server.endpoints.playbooks.get_uuid
      produces:
        - application/json
      responses:
        201:
          description: Success
          schema:
            type: object
            required: [uuid]
            properties:
              uuid:
                $ref: '#/definitions/Uuid'


  /roles:
    get:
      tags:
        - Roles
      summary: Read all roles
      description: ''
      operationId: walkoff.server.endpoints.roles.read_all_roles
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            description: A list of roles
            type: array
            items:
              $ref: '#/definitions/Role'
    post:
      tags:
        - Roles
      summary: Create a role
      description: ''
      operationId: walkoff.server.endpoints.roles.create_role
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The role object to be created
          required: true
          schema:
            $ref: '#/definitions/AddRole'
      responses:
        201:
          description: Object created.
          schema:
            $ref: '#/definitions/Role'
        400:
          description: Object exists.
    put:
      tags:
        - Roles
      summary: Update a role
      description: ''
      operationId: walkoff.server.endpoints.roles.update_role
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated fields for the role object
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Role'
        404:
          description: Object does not exist.
    patch:
      tags:
        - Roles
      summary: Update a role
      description: ''
      operationId: walkoff.server.endpoints.roles.patch_role
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated fields for the role object
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Role'
        404:
          description: Object does not exist.
  /roles/{role_id}:
    parameters:
      - name: role_id
        in: path
        description: The name that needs to be fetched.
        required: true
        type: string
    get:
      tags:
        - Roles
      summary: Read a role
      description: ''
      operationId: walkoff.server.endpoints.roles.read_role
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Role'
        404:
          description: Object does not exist.
    delete:
      tags:
        - Roles
      summary: Delete a role
      description: ''
      operationId: walkoff.server.endpoints.roles.delete_role
      produces:
        - application/json
      responses:
        204:
          description: Success
        404:
          description: Object does not exist.

  /availableresourceactions:
      get:
        tags:
          - Roles
        summary: Read all available resource actions
        description: ''
        operationId: walkoff.server.endpoints.roles.read_available_resource_actions
        produces:
          - application/json
        responses:
          200:
            description: Success
            schema:
              description: List of available resource actions
              type: array
              items:
                $ref: '#/definitions/AvailableResourceAction'


  /scheduler:
    get:
      tags:
        - Scheduler
      summary: Get the current scheduler status.
      description: ''
      operationId: walkoff.server.endpoints.scheduler.get_scheduler_status
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Scheduler'
    put:
      tags:
        - Scheduler
      summary: Update the status of the scheduler
      description: ''
      operationId: walkoff.server.endpoints.scheduler.update_scheduler_status
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new Scheduled Task object
          required: true
          schema:
            type: object
            required: [status]
            properties:
              status:
                description: Requested status of the scheduler
                type: string
                enum: [start, stop, pause, resume]
      responses:
        200:
          description: Success
          schema:
            type: object
            required: [status]
            properties:
              status:
                type: string
                description: The current status of the scheduler

  /scheduledtasks:
    get:
      tags:
        - Scheduler
      summary: Get all the scheduled tasks
      operationId: walkoff.server.endpoints.scheduler.read_all_scheduled_tasks
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: A list of Scheduled Task objects
            type: array
            items:
              $ref: '#/definitions/ScheduledTask'
    post:
      tags:
        - Scheduler
      summary: Create a new Scheduled Task
      operationId: walkoff.server.endpoints.scheduler.create_scheduled_task
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new Scheduled Task object
          required: true
          schema:
            $ref: '#/definitions/AddScheduledTask'
      responses:
        201:
          description: Success
          schema:
            description: A list of Scheduled Task objects
            type: array
            items:
              $ref: '#/definitions/ScheduledTask'
        400:
          description: Scheduled task already exists
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Scheduler
      summary: Update a new Scheduled Task
      operationId: walkoff.server.endpoints.scheduler.update_scheduled_task
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The updated Scheduled Task object
          required: true
          schema:
            $ref: '#/definitions/ScheduledTask'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ScheduledTask'
        404:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Scheduled task name already exists
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Scheduler
      summary: Enable the scheduled task
      operationId: walkoff.server.endpoints.scheduler.control_scheduled_task
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The updated Scheduled Task object
          required: true
          schema:
            type: object
            required: [id, action]
            properties:
              id:
                type: integer
              action:
                type: string
                description: The requested status of the task
                enum: [start, stop]
      responses:
        200:
          description: Success
        404:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'

  /scheduledtasks/{scheduled_task_id}:
    parameters:
      - name: scheduled_task_id
        in: path
        description: The ID of the scheduled task.
        required: true
        type: string
    get:
      tags:
        - Scheduler
      summary: Get the scheduled task
      operationId: walkoff.server.endpoints.scheduler.read_scheduled_task
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ScheduledTask'
        404:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Scheduler
      summary: Delete the scheduled task
      operationId: walkoff.server.endpoints.scheduler.delete_scheduled_task
      produces:
        - application/json
      responses:
        204:
          description: Success
        404:
          description: Scheduled task does not exist
          schema:
            $ref: '#/definitions/Error'

  /triggers/send_data:
    put:
      summary: Send data to one or more workflows with trigger actions awaiting data before continuing execution
      description: ''
      operationId: walkoff.server.endpoints.triggers.send_data_to_trigger
      tags:
        - Triggers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [execution_ids, data_in]
            properties:
              execution_ids:
                description: Execution IDs of currently paused workflows
                type: array
                items:
                  type: string
              data_in:
                description: Data to send to workflows awaiting data
              arguments:
                description: Updated arguments to send to the trigger action
                type: array
                items:
                  $ref: '#/definitions/Argument'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: string
              description: The execution IDs of workflows that were sent data.


  /users:
    get:
      tags:
        - Users
      summary: Read all users
      description: ''
      operationId: walkoff.server.endpoints.users.read_all_users
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            description: A list of users
            items:
              $ref: '#/definitions/DisplayUser'
    post:
      tags:
        - Users
      summary: Create a user
      description: ''
      operationId: walkoff.server.endpoints.users.create_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The new user object to be created
          required: true
          schema:
            $ref: '#/definitions/AddUser'
      responses:
        201:
          description: User created.
          schema:
            description: The newly created user.
            $ref: '#/definitions/DisplayUser'
        400:
          description: Could not create user <username>. User already exists.
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Users
      summary: Update a user
      description: ''
      operationId: walkoff.server.endpoints.users.update_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated fields for the user object
          required: true
          schema:
            $ref: '#/definitions/EditUser'
      responses:
        200:
          description: Success
          schema:
            description: The updated user.
            $ref: '#/definitions/DisplayUser'
        400:
          description: Invalid password
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Could not edit user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Users
      summary: Update a user
      description: ''
      operationId: walkoff.server.endpoints.users.patch_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Updated fields for the user object
          required: true
          schema:
            $ref: '#/definitions/EditUser'
      responses:
        200:
          description: Success
          schema:
            description: The updated user.
            $ref: '#/definitions/DisplayUser'
        400:
          description: Invalid password
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Could not edit user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'


  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: The id of the user to be fetched
        required: true
        type: integer
    get:
      tags:
        - Users
      summary: Get a user
      description: ''
      operationId: walkoff.server.endpoints.users.read_user
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            description: The user object matching the user id inputted
            $ref: '#/definitions/DisplayUser'
        404:
          description: Could not display user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: ''
      operationId: walkoff.server.endpoints.users.delete_user
      produces:
        - application/json
      responses:
        204:
          description: Success
        401:
          description: Could not delete user <username>. User is current user.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Could not delete user <username>. User does not exist.
          schema:
            $ref: '#/definitions/Error'

  /workflowqueue:
    get:
      tags:
        - WorkflowQueue
      summary: Get status information on the workflows currently executing
      description: ''
      operationId: walkoff.server.endpoints.workflowqueue.get_all_workflow_status
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          type: integer
          minimum: 1
          default: 50
          required: false
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkflowStatus'
    post:
      tags:
        - WorkflowQueue
      summary: Execute a workflow
      description: ''
      operationId: walkoff.server.endpoints.workflowqueue.execute_workflow
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ExecuteWorkflow'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        202:
          description: Success asynchronous.
          schema:
            $ref: '#/definitions/Uuid'
        404:
          description: Workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - WorkflowQueue
      summary: Pause, resume, or abort a workflow
      description: ''
      operationId: walkoff.server.endpoints.workflowqueue.control_workflow
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/ControlWorkflow'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        204:
          description: Success.
        404:
          description: Workflow does not exist.
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Invalid input error.
          schema:
            $ref: '#/definitions/Error'

  /workflowqueue/{execution_id}:
    parameters:
      - name: execution_id
        in: path
        description: The ID that needs to be fetched.
        required: true
        type: string
        format: uuid
    get:
      tags:
        - WorkflowQueue
      summary: Get status information on a currently executing workflow
      description: ''
      operationId: walkoff.server.endpoints.workflowqueue.get_workflow_status
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/FullWorkflowStatus'
        404:
          description: Object does not exist.
          schema:
            $ref: '#/definitions/Error'
  /workflowqueue/cleardb:
    parameters:
      - name: all
        in: query
        description: Whether or not to delete all workflow statuses, defaults to false
        required: false
        type: boolean
      - name: days
        in: query
        description: The number of days of workflow statuses to keep
        required: false
        type: integer
    delete:
      tags:
        - WorkflowQueue
      summary: Removes workflow statuses from the execution database. It will delete all of them or ones older than a certain number of days
      description: ''
      operationId: walkoff.server.endpoints.workflowqueue.clear_workflow_status
      produces:
        - application/json
      responses:
        204:
          description: Success



securityDefinitions:
  AuthenticationToken:
    type: apiKey
    name: Authorization
    in: header
    description: >
      We use a JWT authorization workflow. Use the /api/auth endpoint to get JWT access and refresh tokens. Then use the
      access token in the header "Authorization: Bearer accesstoken.goes.here".  That token will expire in 15 minutes by
      default. When it expires, you'll receive a 401 response code. At that point, use the /api/auth/refresh
      with the header "Authorization: Bearer refreshtoken.goes.here" to receive a fresh access token. When you're done,
      please use the /api/auth/logout endpoint to log out.  See the implementation in the Walkoff App for an example
      implementation.
security:
  - AuthenticationToken: []

definitions:
    Error:
      type: object
      required: [title, detail, status, type]
      description: An error in RFC 7807 format
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        status:
          type: string
          description: The HTTP status code generated for this occurrence of the problem
        type:
          type: string
          description: >
            A URI reference that identifies the problem type. When dereferenced it should provide
            human-readable documentation for the problem type.
          default: 'about:blank'
        instance:
          type: string
          description: >
            A URI reference that identifies the specific occurrence of the problem. It may or may
            not yield further information if dereferenced.
    AvailableSubscriptions:
      type: object
      required: [type, events]
      description: The events which can be subscribed to for an execution element
      properties:
        type:
          description: The type of execution element
          type: string
          example: Condition
          enum: [controller, playbook, workflow, action, branch, condition, transform]
        events:
          description: Events which can be subscribed to
          type: array
          items:
            type: string
          example: [Event1, Event_2, 'Event 3']

    Uuid:
      type: string
      description: A 32-bit hexadecimal string representing a globally unique identifier
      format: uuid

    AppApi:
      type: object
      description: Api used for an app
      required: [info]
      properties:
        info:
          $ref: '#/definitions/ApiInfo'
        action_apis:
          description: Actions associated with this app
          type: array
          items:
            $ref: '#/definitions/ActionApi'
        condition_apis:
          description: Conditions associated with this app
          type: array
          items:
            $ref: '#/definitions/ConditionApi'
        transform_apis:
          description: Transforms associated with this app
          type: array
          items:
            $ref: '#/definitions/TransformApi'
        device_apis:
          description: Devices associated with this app
          type: array
          items:
            $ref: '#/definitions/DeviceApi'
        tags:
          type: array
          items:
            $ref: '#/definitions/ApiTag'
          uniqueItems: true
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'

    ApiInfo:
      type: object
      description: General information about the API
      required: [version, title]
      properties:
        title:
          type: string
          description: A unique and precise title of the API
          example: Splunk
        version:
          type: string
          description: A semantic version number of the API
        description:
          type: string
          description: A longer description of the API. Should be different from the title.
        terms_of_service:
          type: string
          description: Terms of service for the API
        contact:
          $ref: '#/definitions/ApiContact'
        license:
          $ref: '#/definitions/ApiLicense'

    ApiContact:
      type: object
      description: Contact information for the owners of this API
      properties:
        name:
          type: string
          description: The name of the contact person or organization
        url:
          type: string
          description: The URL pointing to the contact information
          format: uri
        email:
          type: string
          description: The email address of the contact person/organization
          format: email

    ApiLicense:
      type: object
      description: License information for this API
      required: [name]
      properties:
        name:
          type: string
          description: The name of the license type
        url:
          type: string
          description: The URL pointing to the license
          format: uri

    ActionApi:
      type: object
      description: The api of an app's action
      required: [name, run, returns]
      properties:
        name:
          type: string
          description: Unique name of the action
        run:
          type: string
          description: The path to the executable function
        default_return:
          type: string
          description: The name of the default return code (if none specified, defaults to "Success")
        returns:
          type: array
          items:
            $ref: '#/definitions/ReturnApi'
          description: The return types of this action
        parameters:
          type: array
          items:
            $ref: '#/definitions/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: Tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'

    ConditionApi:
      type: object
      description: The api of an app's condition
      required: [name, run, returns, data_in]
      properties:
        name:
          type: string
          description: Unique name of the action
        run:
          type: string
          description: The path to the executable function
        data_in:
          type: string
          description: Name of parameter which comes from executed action
        parameters:
          type: array
          items:
            $ref: '#/definitions/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: Tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
        returns:
          type: array
          items:
            $ref: '#/definitions/ReturnApi'
          description: The return types of this action

    TransformApi:
      type: object
      description: The api of an app's transform
      required: [name, run, data_in, returns]
      properties:
        name:
          type: string
          description: Unique name of the action
        run:
          type: string
          description: The path to the executable function
        data_in:
          type: string
          description: Name of parameter which comes from executed action
        parameters:
          type: array
          items:
            $ref: '#/definitions/ParameterApi'
          description: The parameters needed by this action
        deprecated:
          type: boolean
          default: false
          description: Is this action deprecated?
        tags:
          type: array
          items:
            type: string
          description: tags for this action
          uniqueItems: true
        summary:
          type: string
          description: A brief summary of this action
        description:
          type: string
          description: A longer description of the operation
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'
        returns:
          type: array
          items:
            $ref: '#/definitions/ReturnApi'
          description: The return types of this transform

    DeviceApi:
      type: object
      required: [name, fields]
      properties:
        name:
          type: string
          description: Name of the device type
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/definitions/DeviceFieldApi'

    DeviceFieldApi:
      type: object
      required: [name, schema]
      properties:
        name:
          type: string
        description:
          type: string
          description: Description of what the argument provides
        encrypted:
          type: boolean
          description: Is this field encrypted
          default: false
        placeholder:
          type: string
          description: Brief description of the field to be used to prompt a user
        required:
          type: boolean
          default: false
          description: Is this field required?
        schema:
          $ref: '#/definitions/ParameterSchema'


    ParameterApi:
      type: object
      description: A parameter using for actions
      required: [name, schema]
      properties:
        name:
          type: string
        example:
          description: Example of the parameter
        description:
          type: string
          description: Description of the parameter
        placeholder:
          type: string
          description: Brief description of the field to be used to prompt a user
        required:
          type: boolean
          default: false
          description: Is this parameter required
        schema:
          $ref: '#/definitions/ParameterSchema'

    ReturnApi:
      type: object
      description: A specification of what an action returns
      required: [status]
      properties:
        status:
          type: string
          description: Status of the return
        description:
          type: string
          description: Description of the return type
        failure:
          type: boolean
          description: Whether this return type indicates action failure
          default: false
        schema:
          $ref: '#/definitions/ParameterSchema'
        examples:
          description: An exaple of the returned type

    ExternalDoc:
      type: object
      description: information about external documentation
      required: [url]
      properties:
        description:
          type: string
          description: Description of the documentation
        url:
          type: string
          description: Points to the external documentation
          format: uri

    ApiTag:
      type: object
      description: A tag for a class of actions/conditions/transforms in this app
      required: [name]
      properties:
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: Description of the tag
        external_docs:
          type: array
          items:
            $ref: '#/definitions/ExternalDoc'

    ParameterSchema:
      type: object
      description: Fields used to validate parameter against a JSON schema (Draft 4)
      required: [type]
      properties:
        type:
          type: string
          enum: [string, boolean, integer, number, object, array]
        format:
          type: string
          enum: [date-time, email, hostname, ipv4, ipv6, uri, uri-reference, uri-template, json-pointer]
        multipleOf:
          type: number
          minimum: 0
          exclusiveMinimum: true
        maximum:
          type: number
        exclusiveMaximum:
          type: boolean
        minimum:
          type: number
        exclusiveMinimum:
          type: boolean
        maxLength:
          type: integer
          minimum: 0
        minLength:
          type: integer
          minimum: 0
        pattern:
          type: string
        maxItems:
          type: integer
          minimum: 0
        minItems:
          type: integer
          minimum: 0
        uniqueItems:
          type: boolean
        enum:
          type: array
          items: {}
          minItems: 1


    Authentication:
      type: object
      required: [username, password]
      additionalProperties: false
      properties:
        username:
          type: string
        password:
          type: string

    Token:
      type: object
      required: [access_token]
      properties:
        access_token:
          type: string
          description: Short-lived JWT used to provide access
        refresh_token:
          type: string
          description: Long-lived JWT used to refresh a token


    Configuration:
        type: object
        description: The configuration
        additionalProperties : false
        properties:
          db_path:
            type: string
            description: The path to the primary WALKOFF database
          logging_config_path:
            type: string
            description: The path to the logging configuration
          host:
            type: string
            description: The server's host URL
          port:
            type: integer
            description: The server's port
            minimum: 0
            maximum: 65535
            default: 5000
          walkoff_db_type:
            type: string
            description: The type of database used by the primary WALKOFF database
            enum: [sqlite, mysql, postgresql, oracle, mssql]
            default: sqlite
          number_processes:
            type: integer
            minimum: 1
            description: Number of worker processes which can execute workflows
            default: 4
          access_token_duration:
            type: number
            minimum: 1
            description: Time (in minutes) to allow an access token to persist. Should greater than the duration of the refresh token
          refresh_token_duration:
            type: number
            minimum: 1
            description: Time (in days) to allow a refresh token to persist. Should greater than the duration of the refresh token
          zmq_results_address:
            type: string
            description: The IP address and port of the ZMQ results server. Do not change unless necessary.
            default: 'tcp://127.0.0.1:5556'
          zmq_communication_address:
            type: string
            description: The IP address and port of the ZMQ communication server. Do not change unless necessary.
            default: 'tcp://127.0.0.1:5557'
          number_threads_per_process:
            type: number
            description: The number of threads per worker process for executing workflows.
            default: 3
          cache:
            $ref: '#/definitions/CacheConfig'

    CacheConfig:
      type: object
      required: [type]
      properties:
        type:
          description: The type of cache that should be used
          type: string
          enum: [redis, disk]
        directory:
          description: The directory to hold the cache database (DiskCache only)
          type: string
          format: uri
        shards:
          description: Number of shards to distribute the cache database to (DiskCache only)
          type: integer
          minimum: 1
        timeout:
          description: Cache timeout
          type: number
          minimum: 0.0
        retry:
          description: Should this connection retry timed out connections?
          type: boolean
          default: True
        host:
          description: Host url for the cache (Redis cache only)
          type: string
          default: localhost
        port:
          description: Port for the cache (Redis cache only)
          type: integer
          minimum: 0
          maximum: 65535
          default: 6379
        unix_socket_path:
          description: Path to Unix socket to use for the cache instead of host-port. (Redis cache only)
          type: string

    AddDevice:
      type: object
      required: [name, app_name, type, fields]
      description: Object used to create a device
      properties:
        name:
          description: Name of the device
          type: string
          minLength: 4
          maxLength: 25
          example: Server1
        app_name:
          type: string
          example: HelloWorld
          description: The name of the app associated with this device
        type:
          type: string
          example: HelloWorldDeviceType1
          description: The type of device
          minLength: 4
          maxLength: 25
        description:
          type: string
          example: This device type configures the app under some circumstances
          description: A description of your device type
        fields:
          description: fields used to configure this device
          type: array
          items:
            $ref: '#/definitions/DeviceFieldInput'

    Device:
      type: object
      required: [id]
      properties:
        id:
          type: integer
          example: 1234
          readOnly: true
        name:
          description: Name of the device
          type: string
          minLength: 4
          maxLength: 25
          example: Server1
        app_name:
          type: string
          example: HelloWorld
          description: The name of the app associated with this device
          readOnly: true
        type:
          type: string
          example: HelloWorldDeviceType1
          description: The type of device
          minLength: 4
          maxLength: 25
        description:
          type: string
          example: This device type configures my app under some circumstances
          description: A description of your device type
        fields:
          description: fields used to configure this device
          type: array
          items:
            $ref: '#/definitions/Argument'

    DeviceField:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [string, number, integer, boolean]
        required:
          description: is the argument required
          type: boolean
          default: false
        description:
          type: string
          description: description of what the argument provides
        default:
          description: default value for the argument
        encrypted:
          type: boolean
          description: Is this field encrypted
          default: false

    DeviceFieldInput:
      type: object
      required: [name]
      description: Object used for passing an argument into various actions or device
      properties:
        name:
          type: string
          example: regex
        value:
          example: WALK(.*)


    ActionMetricDetails:
      type: object
      required: [count, avg_time]
      properties:
        count:
          description: Number of times the action has been called
          type: integer
          example: 102
          readOnly: true
        avg_time:
          description: Average execution time for the action. As a timestamp format
          type: string
          example: '0:00:00.001000'
          readOnly: true
    ActionMetric:
      type: object
      required: [name]
      properties:
        name:
          description: Action name
          type: string
          example: repeatBackToMe
          readOnly: true
        success_metrics:
          $ref: '#/definitions/ActionMetricDetails'
        error_metrics:
          $ref: '#/definitions/ActionMetricDetails'
    AppMetricDetails:
      type: object
      required: [name, count, actions]
      properties:
        name:
          description: Name of app
          type: string
          example: HelloWorld
          readOnly: true
        count:
          description: Number of times the app has been used
          type: integer
          example: 42
          readOnly: true
        actions:
          description: Metrics of the app's actions
          type: array
          items:
            $ref: '#/definitions/ActionMetric'
    AppMetrics:
      type: object
      required: [apps]
      properties:
        apps:
          description: Metrics of apps
          type: array
          items:
            $ref: '#/definitions/AppMetricDetails'

    WorkflowMetric:
      type: object
      required: [name, count, avg_time]
      properties:
        name:
          description: Name of the workflow
          type: string
          example: HelloWorldWorkflow
          readOnly: true
        count:
          description: Number of times the workflow has been used
          type: integer
          example: 42
          readOnly: true
        avg_time:
          description: The average run time of this workflow
          type: string
          example: '1 day, 0:01:40.000500'
          readOnly: true
    WorkflowMetrics:
      type: object
      required: [workflows]
      properties:
        workflows:
          type: array
          items:
            $ref: '#/definitions/WorkflowMetric'


    Message:
      type: object
      description: A message sent to a user
      required: [id, subject, created_at, is_read, awaiting_response, body, workflow_execution_id, requires_reauthorization, requires_response]
      properties:
        id:
          description: Id of this message
          type: integer
          minimum: 1
          readOnly: true
          example: 42
        subject:
          description: Subject of this message
          type: string
          example: Remove user?
          readOnly: true
        is_read:
          description: Has this message been read yet?
          type: boolean
          default: false
        created_at:
          description: UTC timestamp of message creation
          type: string
          readOnly: true
          format: date-time
        last_read_at:
          description: UTC timestamp of when message was last read
          type: string
          format: date-time
        awaiting_response:
          description: Is this message awaiting a response
          type: boolean
        body:
          type: array
          items:
            $ref: "#/definitions/MessageComponent"
          description: The body of the message. Each component is rendered in order
          readOnly: true
        workflow_execution_id:
          $ref: '#/definitions/Uuid'
          description: The UUID of the executing workflow which sent this message
          readOnly: true
        requires_reauthorization:
          type: boolean
          default: false
          description: Does the user need to reauthenticate to respond to this message?
          readOnly: true
        requires_response:
          type: boolean
          description: Does this message require a response
          readOnly: true
        responded_at:
          type: string
          description: UTC timestamp of when the message was responded
          format: date-time
        responded_by:
          type: string
          description: username of user who responded to the action
        read_by:
          type: array
          items:
            type: string
          description: usernames of users who have read the message

    MessageSummary:
      type: object
      required: [id, subject, created_at, is_read, awaiting_response]
      description: A message sent to a user
      properties:
        id:
          description: Id of this message
          type: integer
          minimum: 1
          readOnly: true
          example: 42
        subject:
          description: Subject of this message
          type: string
          example: Remove user?
          readOnly: true
        is_read:
          description: Has this message been read yet?
          type: boolean
          default: false
        created_at:
          description: UTC timestamp of message creation
          type: string
          readOnly: true
          format: date-time
        last_read_at:
          description: UTC timestamp of when message was last read
          type: string
          format: date-time
        awaiting_response:
          description: Is this message awaiting a response
          type: boolean

    MessageComponent:
      type: object
      required: [type, data]
      properties:
        type:
          type: string
          description: message component type
          enum: [text, accept_decline, url]
        data:
          type: object
          description: JSON representation of the message component

    CreatePlaybook:
        type: object
        required: [name]
        additionalProperties: false
        properties:
          name:
            type: string
          workflows:
            type: array
            items:
              $ref: '#/definitions/CreateWorkflow'

    Playbook:
        type: object
        required: [id]
        additionalProperties: false
        properties:
          id:
            $ref: '#/definitions/Uuid'
          name:
            type: string
          workflows:
            type: array
            items:
              $ref: '#/definitions/Workflow'

    CreateWorkflow:
      type: object
      required: [name]
      description: A workflow object
      properties:
        name:
          description: The name of the workflow.
          type: string
          example: HelloWorldWorkflow
        start:
          description: ID of the starting action
          $ref: '#/definitions/Uuid'
        actions:
          description: The actions defined in this workflow.
          type: array
          items:
            $ref: "#/definitions/Action"
        branches:
          description: The possible branches
          type: array
          items:
            $ref: '#/definitions/Branch'
        environment_variables:
          description: The environment variables for this workflow
          type: array
          items:
            $ref: '#/definitions/EnvironmentVariable'
        playbook_id:
          description: Only used when copying a workflow to a different playbook
          $ref: '#/definitions/Uuid'

    Workflow:
      type: object
      required: [id, name, start]
      description: A workflow object
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
        name:
          description: The name of the workflow.
          type: string
          example: HelloWorldWorkflow
        start:
          description: ID of the starting action
          $ref: '#/definitions/Uuid'
        actions:
          description: The actions defined in this workflow.
          type: array
          items:
            $ref: "#/definitions/Action"
        branches:
          description: The possible branches
          type: array
          items:
            $ref: '#/definitions/Branch'
        environment_variables:
          description: The environment variables for this workflow
          type: array
          items:
            $ref: '#/definitions/EnvironmentVariable'
        is_valid:
          description: Is this workflow able to be run?
          type: boolean
          readOnly: true
        errors:
          $ref: '#/definitions/ExecutionElementErrors'

    Action:
      type: object
      required: [id, app_name, action_name, name]
      description: Encapsulation of executing an action in an app.
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
          description: The ID of the object. If updating a workflow and the Action object already exists, ID is required. Otherwise, this ID must be UUID4.
        app_name:
          description: The app to which the action belongs
          type: string
          example: CyberAnalytics
        action_name:
          description: The name of the function this Action will take
          type: string
          example: pause
        name:
          description: User-specified name of the action
          type: string
          example: action1
        device_id:
          description: ID of the device to use, encapsulated in an Argument object
          $ref: '#/definitions/DeviceArgument'
        arguments:
          description: The input arguments to the action
          type: array
          items:
            $ref: '#/definitions/Argument'
        trigger:
          description: The trigger condition
          $ref: '#/definitions/ConditionalExpression'
        position:
          description: Position object representing various fields of the position of the Action in the playbook editor.
          $ref: '#/definitions/Position'
        errors:
          $ref: '#/definitions/ExecutionElementErrors'

    Branch:
      type: object
      required: [source_id, destination_id]
      description: Encapsualtion of a list of possible actions to take and conditions required to be met before taking that action
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
          description: The ID of the object. If updating a workflow and the Branch object already exists, ID is required. Otherwise, do not include it.
        source_id:
          description: The source Action ID for this Branch
          $ref: '#/definitions/Uuid'
        destination_id:
          description: The destination Action ID for this Branch, if the conditions evaluate to True
          $ref: '#/definitions/Uuid'
        priority:
          description: The priority for this Branch, which will be compared to other Branches with the same source_id Action, ascending, i.e. 1 is the highest priority.
          type: integer
        status:
          description: The status return code to use
          type: string
          example: Success
        condition:
          description: List of condition to evaluate
          $ref: '#/definitions/ConditionalExpression'
        errors:
          $ref: '#/definitions/ExecutionElementErrors'


    ConditionalExpression:
      type: object
      description: Object which encapsulates Boolean logic
      properties:
        operator:
          type: string
          description: The operation to use which on the conditions
          enum: [and, or, xor]
          default: and
        is_negated:
          description: Should the result of this condition be negated? For example if the condition would return True, then invert it to return False.
          type: boolean
          default: false
        conditions:
          description: Base conditions to evaluate.
          type: array
          items:
            $ref: '#/definitions/Condition'
        child_expressions:
          description: Sub-expressions to evaluate.
          type: array
          items:
            $ref: '#/definitions/ConditionalExpression'
        errors:
          $ref: '#/definitions/ExecutionElementErrors'


    Argument:
      type: object
      required: [name]
      description: Object used for passing an argument into actions. Either reference or value must be selected.
      minProperties: 2
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the object. If updating a workflow and the Argument object already exists, ID is required.
        name:
          type: string
          example: regex
        value:
          description: The value of the argument
          example: WALK(.*)
        reference:
          $ref: '#/definitions/Uuid'
          description: The ID of the action whose output should be used
        selection:
          description: >-
            The path to a subsection of the output of the action to use. For example [1, "a"] would use the second element
            of a list, and the "a" field of that object.
          type: array
          items:
            description: Each subsection of the output of the action to use
        errors:
          $ref: '#/definitions/ExecutionElementErrors'

    DeviceArgument:
      type: object
      description: Object used for passing a device argument into actions. Either reference or value must be selected.
      minProperties: 1
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the object. If updating a workflow and the Argument object already exists, ID is required.
        name:
          type: string
          default: '__device__'
        value:
          description: The value of the argument
          example: WALK(.*)
        reference:
          $ref: '#/definitions/Uuid'
          description: The ID of the action whose output should be used
        selection:
          description: >-
            The path to a subsection of the output of the action to use. For example [1, "a"] would use the second element
            of a list, and the "a" field of that object.
          type: array
          items:
            description: Each path to a subsection of the output of the action to use

    Condition:
      type: object
      required: [app_name, action_name]
      description: Takes data and checks it against a condition given by its action Optionally filters the data before checking.
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
          description: The ID of the object. If updating a workflow and the Condition object already exists, ID is required. Otherwise, do not include it.
        app_name:
          description: The app to which the conditon belongs
          type: string
          example: Utilities
        action_name:
          description: The action encapsulated by this condition
          type: string
          example: regMatch
        arguments:
          description: The inputs to the condition
          type: array
          items:
            $ref: '#/definitions/Argument'
        is_negated:
          description: Should the result of this condition be negated? For example if the condition would return True, then invert it to return False.
          type: boolean
          default: false
        transforms:
          description: transforms for the data before passing it into the condition
          type: array
          items:
            $ref: '#/definitions/Transform'
        errors:
          $ref: '#/definitions/ExecutionElementErrors'

    Transform:
      type: object
      required: [app_name, action_name]
      description: Filters or otherwise transforms the data given to it
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
          description: The ID of the object. If updating a workflow and the Transform object already exists, ID is required. Otherwise, do not include it.
        app_name:
          description: The app to which the transform belongs
          type: string
          example: Utilities
        action_name:
          description: The action encapsulated by this transform
          type: string
          example: count
        arguments:
          description: The inputs to the transform
          type: array
          items:
            $ref: '#/definitions/Argument'
        errors:
          $ref: '#/definitions/ExecutionElementErrors'

    Position:
      type: object
      required: [x, y]
      description: Various specifications for how the Action is displayed in the playbook editor
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the object. If updating a workflow and the Position object already exists, ID is required. Otherwise, do not include it.
        x:
          type: number
          description: The X coordinate for the Action
        y:
          type: number
          description: The Y coordinate for the Action

    EnvironmentVariable:
      type: object
      required: [value]
      description: An environment variable object, which is a type of argument in a Workflow
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
        name:
          type: string
          description: The name of the environment variable
        value:
          type: string
          description: The value of the environment variable
        description:
          type: string
          description: Description of the environment variable

    CopyWorkflow:
        type: object
        properties:
          playbook_id:
            $ref: '#/definitions/Uuid'
          workflow_name:
            type: string

    UpdatePlaybook:
      type: object
      required: [id]
      additionalProperties: false
      properties:
        id:
          $ref: '#/definitions/Uuid'
        name:
          type: string
          description: The new name of the playbook

    ExecutionElementErrors:
      description: Errors attached to this ExecutionElement
      readOnly: true
      type: array
      items:
        type: string

    AddRole:
        type: object
        required: [name]
        properties:
          name:
            description: Name of the role
            type: string
            example: administrative_role
          description:
            description: Description of the role
            type: string
            example: A user with this role can access any resource and has administrative-level privileges.
          resources:
            description: A list of resources that a user with this role can access
            type: array
            items:
              $ref: '#/definitions/AddResource'

    AddResource:
        type: object
        required: [name]
        properties:
          name:
            description: Name of the resource
            type: string
            example: playbooks, cases
          permissions:
            description: A list of permissions associated with this resource
            example: [create, read, update, delete, execute]
            type: array
            items:
              type: string

    Role:
        type: object
        required: [id]
        properties:
          id:
            type: integer
            minimum: 1
            description: id of the object
          name:
            description: Name of the role
            type: string
            example: administrative_role
          description:
            description: Description of the role
            type: string
            example: A user with this role can access any resource and has administrative-level privileges.
          resources:
            description: A list of resources that a user with this role can access
            example: [/users, /cases, /playbooks]
            type: array
            items:
              $ref: '#/definitions/Resource'

    Resource:
        type: object
        properties:
          id:
            type: integer
            minimum: 1
            description: ID of the object
          name:
            description: Name of the resource
            type: string
            example: playbooks, cases
          permissions:
            description: A list of permissions associated with this resource
            example: [create, read, update, delete, execute]
            type: array
            items:
              type: string

    AvailableResourceAction:
      type: object
      properties:
        name:
          type: string
          description: Name of the resource
          example: playbooks, cases
        actions:
          description: A list of actions or permissions available for this resource
          example: [create, read, update, delete]
          type: array
          items:
            type: string
        app_name:
          type: string
          description: The name of the app associated with this resource, if applicable
          example: HelloWorld, DailyQuote


    Scheduler:
      type: object
      required: [status]
      properties:
        status:
          description: State of trigger
          type: string
          example: 0 for stopped, 1 for running, 2 for paused, or a warning string

    AddScheduledTask:
      type: object
      required: [name]
      additionalProperties: false
      properties:
        workflows:
          description: List if IDs of workflows attached to this task
          type: array
          items:
            $ref: '#/definitions/Uuid'
        name:
          type: string
          description: Name of this task
        description:
          type: string
          description: description of this task
        status:
          type: string
          description: Status of the task
          enum: [running, stopped]
        task_trigger:
          $ref: '#/definitions/TaskTrigger'

    ScheduledTask:
      type: object
      required: [id]
      additionalProperties: false
      properties:
        id:
          type: integer
          description: ID of the object
          readOnly: true
        workflows:
          description: List if IDs of workflows attached to this task
          type: array
          items:
            $ref: '#/definitions/Uuid'
        name:
          type: string
          description: Name of this task
        description:
          type: string
          description: description of this task
        status:
          type: string
          description: Status of the task
          enum: [running, stopped]
        task_trigger:
          $ref: '#/definitions/TaskTrigger'
        action:
          type: string
          enum: [start, stop]

    TaskTrigger:
      type: object
      description: Scheduler to use.
      required: [args, type]
      properties:
        type:
          description: Type of scheduler trigger to use for this task
          type: string
          enum: [date, interval, cron]
          example: date
        args:
          type: object
          description: Arguments for the trigger.


    AddUser:
        type: object
        required: [username, password]
        properties:
          username:
            description: Username or email of the user
            type: string
            example: administrator
          password:
            description: Password for the user
            type: string
            example: password123
          roles:
            description: A list of role IDs that this user possesses. Roles can only be assigned to a User by an admin.
            $ref: '#/definitions/RoleIdList'
          active:
            description: activate/deactive a user. Active can only be changed by an admin.
            type: boolean

    EditUser:
        type: object
        required: [id]
        properties:
          id:
            description: Database id of the user
            type: integer
            example: 123
            readOnly: true
          username:
            description: New username or email of the user
            type: string
            example: administrator
          old_password:
            description: Previous password for the user
            type: string
            example: password123
          password:
            description: New password for the user
            type: string
            example: password321
          active:
            description: activate/deactive a user. Active can only be changed by an admin.
            type: boolean
          roles:
            description: A new list of role IDs that this user will possess. Roles can only be assigned by an admin.
            $ref: '#/definitions/RoleIdList'

    DisplayUser:
        type: object
        properties:
          id:
            description: Database id of the user
            type: integer
            example: 123
            readOnly: true
          username:
            description: Username or email of the user
            type: string
            example: administrator
          active:
            description: activate/deactive a user
            type: boolean
          roles:
            description: List of role object IDs that this user possesses
            type: array
            items:
              type: integer

    RoleIdList:
      type: array
      items:
        type: object
        required: [id]
        properties:
          id:
            type: integer
            description: The ID of a role the user posesses


    WorkflowStatus:
      type: object
      required: [execution_id, workflow_id, name, status]
      properties:
        execution_id:
          $ref: '#/definitions/Uuid'
        workflow_id:
          $ref: '#/definitions/Uuid'
        name:
          description: The name of the workflow.
          type: string
          example: WorkflowName
          readOnly: true
        status:
          description: The current status of the workflow
          type: string
          enum: ['pending', 'running', 'paused', 'awaiting_data', 'completed', 'aborted']
          readOnly: true
        started_at:
          description: The timestamp of the start of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of the end of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
        current_action:
          description: The currently executing action
          $ref: '#/definitions/ActionIdentification'

    FullWorkflowStatus:
      type: object
      required: [action_statuses, execution_id, workflow_id, name, status]
      properties:
        execution_id:
          $ref: '#/definitions/Uuid'
        workflow_id:
          $ref: '#/definitions/Uuid'
        name:
          description: The name of the workflow.
          type: string
          example: WorkflowName
          readOnly: true
        status:
          description: The current status of the workflow
          type: string
          enum: ['pending', 'running', 'paused', 'awaiting_data', 'completed', 'aborted']
          readOnly: true
        started_at:
          description: The timestamp of the start of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of the end of workflow execution
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
        action_statuses:
          description: The statuses of the workflow actions
          type: array
          items:
            $ref: '#/definitions/ActionStatus'

    ActionStatus:
      type: object
      description: The status of an action execution
      required: [action_id, execution_id, name, action_name, app_name, status, started_at]
      properties:
        execution_id:
          $ref: '#/definitions/Uuid'
        action_id:
          $ref: '#/definitions/Uuid'
        name:
          description: The name of the action
          type: string
          example: 'This One action'
          readOnly: true
        app_name:
          description: The name of the app associated with the action
          type: string
          example: ThingGetter
          readOnly: true
        action_name:
          description: The name of the action take by the action
          type: string
          example: get that thing
          readOnly: true
        status:
          description: The status of the workflow
          type: string
          enum: ['executing', 'awaiting_data', 'success', 'failure', 'aborted']
          readOnly: true
        result:
          description: The result of the action
          type: object
          readOnly: true
        started_at:
          description: The timestamp of when the action started
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of when the action completed
          type: string
          format: date-time
          example: '2017-05-24T00:43:26.930892Z'
          readOnly: true

    ActionIdentification:
      type: object
      description: The descriptive identification of an action
      required: [action_id, execution_id, name, action_name, app_name]
      properties:
        execution_id:
          $ref: '#/definitions/Uuid'
        action_id:
          $ref: '#/definitions/Uuid'
        name:
          description: The name of the action
          type: string
          example: 'This One action'
          readOnly: true
        app_name:
          description: The name of the app associated with the action
          type: string
          example: ThingGetter
          readOnly: true
        action_name:
          description: The name of the action take by the action
          type: string
          example: get that thing
          readOnly: true

    ActionStatusDetails:
      type: object
      required: [status, started_at]
      description: The details of an action execution
      properties:
        status:
          description: The status of the workflow
          type: string
          enum: ['executing', 'awaiting_data', 'success', 'failure', 'aborted']
          readOnly: true
        result:
          description: The result of the action
          type: object
          readOnly: true
        started_at:
          description: The timestamp of when the action started
          type: string
          format: date-time
          example: '2017-05-24T00:42:22.934058Z'
          readOnly: true
        completed_at:
          description: The timestamp of when the action completed
          type: string
          format: date-time
          example: '2017-05-24T00:43:26.930892Z'
          readOnly: true

    ExecuteWorkflow:
      type: object
      required: [workflow_id]
      properties:
        workflow_id:
          $ref: '#/definitions/Uuid'
        start:
          description: The ID of the starting action
          $ref: '#/definitions/Uuid'
        arguments:
          type: array
          items:
            $ref: '#/definitions/Argument'
        environment_variables:
          type: array
          items:
            $ref: '#/definitions/EnvironmentVariableExecute'

    EnvironmentVariableExecute:
      type: object
      required: [id, value]
      description: Additional environment variables to pass into the workflow execute. There is no need to pass the name.
      properties:
        id:
          $ref: '#/definitions/Uuid'
        value:
          type: string
          description: The value for the environment variable

    ControlWorkflow:
      type: object
      required: [execution_id, status]
      properties:
        execution_id:
          $ref: '#/definitions/Uuid'
        status:
          description: The action to take on the executing workflow
          type: string
          enum: ['pause', 'resume', 'abort']
